{"version":3,"file":"static/js/676.da029a97.chunk.js","mappings":"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","sources":["common/utils/useForm.tsx","common/utils/validationRules.ts","components/Block/styles.ts","components/Block/index.tsx","common/Input/styles.ts","common/TextArea/styles.tsx","common/Input/index.tsx","common/TextArea/index.tsx","components/ContactForm/styles.ts","components/ContactForm/index.tsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport { IValues } from \"../../components/ContactForm/types\";\r\n\r\nexport const useForm = (\r\n  validate: (values: IValues) => { [key in keyof IValues]?: string }\r\n) => {\r\n  const [values, setValues] = useState<IValues>({ name: \"\", email: \"\", message: \"\" });\r\n  const [errors, setErrors] = useState<{ [key in keyof IValues]?: string }>({});\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n    const { name, value } = event.target;\r\n    setValues({\r\n      ...values,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n    const validationErrors = validate(values);\r\n    setErrors(validationErrors);\r\n  };\r\n\r\n  const resetForm = () => {\r\n    console.log(\"Resetting form...\"); // Debugging log\r\n    setValues({ name: \"\", email: \"\", message: \"\" });// Clear form fields\r\n    setErrors({}); // Clear validation errors\r\n  };\r\n\r\n  return { values, errors, handleChange, handleSubmit, setValues, resetForm };\r\n};\r\n","import { IValues } from \"../../components/ContactForm/types\";\r\n\r\nconst validate = (values: IValues): { [key in keyof IValues]?: string } => {\r\n  let errors: { name?: string; email?: string; message?: string } = {};\r\n\r\n  // Validate Name\r\n  if (!values.name) {\r\n    errors.name = \"Name is required.\";\r\n  } else if (values.name.length < 2) {\r\n    errors.name = \"Name must be at least 2 characters.\";\r\n  }\r\n\r\n  // Validate Email\r\n  if (!values.email) {\r\n    errors.email = \"Email is required.\";\r\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\r\n    errors.email = \"Invalid email address.\";\r\n  }\r\n\r\n  // Validate Message\r\n  if (!values.message) {\r\n    errors.message = \"Message is required.\";\r\n  } else if (values.message.length < 10) {\r\n    errors.message = \"Message must be at least 10 characters.\";\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport default validate;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Content = styled(\"p\")`\r\n  margin-top: 1.5rem;\r\n`;\r\n\r\nexport const Container = styled(\"div\")`\r\n  position: relative;\r\n  max-width: 700px;\r\n`;\r\n\r\nexport const TextWrapper = styled(\"div\")`\r\n  border-radius: 3rem;\r\n  max-width: 400px;\r\n`;\r\n","import { withTranslation, TFunction } from \"react-i18next\";\r\nimport { Container, TextWrapper, Content } from \"./styles\";\r\n\r\ninterface Props {\r\n  title: string;\r\n  content: string;\r\n  t: TFunction;\r\n}\r\n\r\nconst Block = ({ title, content, t }: Props) => {\r\n  return (\r\n    <Container>\r\n      <h6>{t(title)}</h6>\r\n      <TextWrapper>\r\n        <Content>{t(content)}</Content>\r\n      </TextWrapper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(Block);\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 10px 5px;\r\n`;\r\n\r\nexport const StyledInput = styled(\"input\")`\r\n  font-size: 0.875rem;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledContainer = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 10px 5px;\r\n  margin-bottom: -0.625rem;\r\n`;\r\n\r\nexport const StyledTextArea = styled(\"textarea\")`\r\n  resize: none;\r\n  font-size: 0.875rem;\r\n  height: 185px;\r\n`;\r\n\r\nexport const Label = styled(\"label\")`\r\n  display: block;\r\n  padding-bottom: 10px;\r\n  text-transform: capitalize;\r\n`;\r\n","import { withTranslation } from \"react-i18next\";\r\nimport { Container, StyledInput } from \"./styles\";\r\nimport { Label } from \"../TextArea/styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\nconst Input = ({ name, placeholder, onChange, t }: InputProps) => (\r\n  <Container>\r\n    <Label htmlFor={name}>{t(name)}</Label>\r\n    <StyledInput\r\n      placeholder={t(placeholder)}\r\n      name={name}\r\n      id={name}\r\n      onChange={onChange}\r\n    />\r\n  </Container>\r\n);\r\n\r\nexport default withTranslation()(Input);\r\n","import { withTranslation } from \"react-i18next\";\r\nimport { StyledTextArea, StyledContainer, Label } from \"./styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\nconst TextArea = ({ name, placeholder, onChange, t }: InputProps) => (\r\n  <StyledContainer>\r\n    <Label htmlFor={name}>{t(name)}</Label>\r\n    <StyledTextArea\r\n      placeholder={t(placeholder)}\r\n      id={name}\r\n      name={name}\r\n      onChange={onChange}\r\n    />\r\n  </StyledContainer>\r\n);\r\n\r\nexport default withTranslation()(TextArea);\r\n","import styled from \"styled-components\";\r\n\r\nexport const ContactContainer = styled(\"div\")`\r\n  padding: 5rem 0;\r\n\r\n  @media only screen and (max-width: 1024px) {\r\n    padding: 3rem 0;\r\n  }\r\n`;\r\n\r\nexport const FormGroup = styled(\"form\")`\r\n  width: 100%;\r\n  max-width: 520px;\r\n\r\n  @media only screen and (max-width: 1045px) {\r\n    max-width: 100%;\r\n    margin-top: 2rem;\r\n  }\r\n`;\r\n\r\nexport const Span = styled(\"span\")`\r\n  display: block;\r\n  font-weight: 600;\r\n  color: rgb(255, 130, 92);\r\n  height: 0.775rem;\r\n  padding: 0 0.675rem;\r\n`;\r\n\r\nexport const ButtonContainer = styled(\"div\")`\r\n  text-align: end;\r\n  position: relative;\r\n\r\n  @media only screen and (max-width: 414px) {\r\n    padding-top: 0.75rem;\r\n  }\r\n`;\r\n","import { Row, Col } from \"antd\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport { Slide } from \"react-awesome-reveal\";\r\nimport { ContactProps, ValidationTypeProps } from \"./types\";\r\nimport { useForm } from \"../../common/utils/useForm\";\r\nimport validate from \"../../common/utils/validationRules\";\r\nimport { Button } from \"../../common/Button\";\r\nimport Block from \"../Block\";\r\nimport Input from \"../../common/Input\";\r\nimport TextArea from \"../../common/TextArea\";\r\nimport { ContactContainer, FormGroup, Span, ButtonContainer } from \"./styles\";\r\n\r\nconst Contact = ({ title, content, id, t }: ContactProps) => {\r\n  const { values, errors, handleChange, handleSubmit, resetForm } = useForm(validate); // Include resetForm\r\n\r\n  const ValidationType = ({ type }: ValidationTypeProps) => {\r\n    const ErrorMessage = errors[type as keyof typeof errors];\r\n    return <Span>{ErrorMessage}</Span>;\r\n  };\r\n\r\n  const onSubmit = async (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n    if (Object.keys(errors).length === 0 && values.name && values.email && values.message) {\r\n      try {\r\n        const response = await fetch(\"https://formspree.io/f/mgvvryej\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            name: values.name,\r\n            email: values.email,\r\n            message: values.message,\r\n          }),\r\n        });\r\n  \r\n        if (response.ok) {\r\n          alert(\"Message sent successfully!\");\r\n          resetForm(); // Clear the form fields and errors\r\n        } else {\r\n          alert(\"Failed to send message. Please try again.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error submitting form:\", error);\r\n        alert(\"An error occurred. Please try again.\");\r\n      }\r\n    } else {\r\n      alert(\"Please fill out all fields correctly.\");\r\n    }\r\n  };\r\n  \r\n\r\n  return (\r\n    <ContactContainer id={id}>\r\n      <Row justify=\"space-between\" align=\"middle\">\r\n        <Col lg={12} md={11} sm={24} xs={24}>\r\n          <Slide direction=\"left\" triggerOnce>\r\n            <Block title={title} content={content} />\r\n          </Slide>\r\n        </Col>\r\n        <Col lg={12} md={12} sm={24} xs={24}>\r\n          <Slide direction=\"right\" triggerOnce>\r\n            <FormGroup autoComplete=\"off\" onSubmit={onSubmit}>\r\n              <Col span={24}>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  placeholder=\"Your Name\"\r\n                  value={values.name || \"\"}\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"name\" />\r\n              </Col>\r\n              <Col span={24}>\r\n                <Input\r\n                  type=\"email\"\r\n                  name=\"email\"\r\n                  placeholder=\"Your Email\"\r\n                  value={values.email || \"\"}\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"email\" />\r\n              </Col>\r\n              <Col span={24}>\r\n                <TextArea\r\n                  placeholder=\"Your Message\"\r\n                  value={values.message || \"\"}\r\n                  name=\"message\"\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"message\" />\r\n              </Col>\r\n              <ButtonContainer>\r\n                <Button name=\"submit\">{t(\"Submit\")}</Button>\r\n              </ButtonContainer>\r\n            </FormGroup>\r\n          </Slide>\r\n        </Col>\r\n      </Row>\r\n    </ContactContainer>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(Contact);\r\n"],"names":["values","errors","name","length","email","test","message","Content","styled","_templateObject","_taggedTemplateLiteral","Container","_templateObject2","TextWrapper","_templateObject3","withTranslation","_ref","title","content","t","_jsxs","children","_jsx","StyledInput","StyledContainer","StyledTextArea","Label","placeholder","onChange","htmlFor","id","ContactContainer","FormGroup","Span","ButtonContainer","_templateObject4","handleChange","handleSubmit","resetForm","validate","setValues","useState","setErrors","event","value","target","_objectSpread","preventDefault","validationErrors","console","log","useForm","ValidationType","_ref2","type","ErrorMessage","Row","justify","align","Col","lg","md","sm","xs","Slide","direction","triggerOnce","Block","autoComplete","onSubmit","async","Object","keys","fetch","method","headers","body","JSON","stringify","ok","alert","error","span","Input","TextArea","Button"],"sourceRoot":""}